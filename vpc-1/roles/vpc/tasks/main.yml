---
- name:                     Create VPC
  ec2_vpc_net:
    state:                  present
    region:                 "{{ vpc_region }}"
    name:                   "{{ vpc_name }}"
    cidr_block:             "{{ vpc_cidr_block }}"
    resource_tags:          { "Name":"{{vpc_name}}", "Environment":"{{env_name}}" }
  register:                 my_vpc
- set_fact:
    vpc_id:                 "{{ my_vpc.vpc.id }}"
#- debug:                   var=hostvars

- name:                     Create public subnet 1
  ec2_vpc_subnet:
    state:                  present
    region:                 "{{ vpc_region }}"
    vpc_id:                 "{{ vpc_id }}"
    cidr:                   "{{ pub_subnet_cidr_1 }}"
    az:                     "{{ pub_subnet_az_1 }}"
    resource_tags:          { "Name":"{{ pub_subnet_cidr_1 }}|{{ pub_subnet_az_1 }}", "Type":"Public", "Tier":"Web" }
  register:                 my_pub_subnet_1
- set_fact:
    pub_subnet_1_id:        "{{ my_pub_subnet_1.subnet.id }}"
#- debug:                   var=hostvars

- name:                     Create private subnet 1
  ec2_vpc_subnet:
    state:                  present
    region:                 "{{ vpc_region }}"
    vpc_id:                 "{{ vpc_id }}"
    cidr:                   "{{ pri_subnet_cidr_1 }}"
    az:                     "{{ pri_subnet_az_1 }}"
    resource_tags:          { "Name":"{{ pri_subnet_cidr_1 }}|{{ pri_subnet_az_1 }}", "Type":"Private", "Tier":"App" }
  register:                 my_pri_subnet_1
- set_fact:
    pri_subnet_1_id:        "{{ my_pri_subnet_1.subnet.id }}"
#- debug:                   var=hostvars

- name:                     Create internet gateway
  ec2_vpc_igw:
    state:                  present
    region:                 "{{ vpc_region }}"
    vpc_id:                 "{{ vpc_id }}"
    resource_tags:          { "Name":"IGW", "Type":"Public" }
  register:                 my_igw
- set_fact:
    igw_id:                 "{{ my_igw.gateway_id }}"
#- debug:                   var=hostvars

- name:                     Create NAT gateway
  ec2_vpc_nat_gateway:
    state:                  present
    subnet_id:              "{{ pub_subnet_1_id }}"
    wait:                   yes
    region:                 "{{ vpc_region }}"
    if_exist_do_not_create: true
#    resource_tags:         { "Name":"NGW", "Type":"Private" }
  register:                 my_ngw
#- debug:                   var=hostvars
- set_fact:
    ngw_id:                 "{{ my_ngw.nat_gateway_id }}"

- name:                     Setup public subnet routes
  ec2_vpc_route_table:
    state:                  present
    region:                 "{{ vpc_region }}"
    vpc_id:                 "{{ vpc_id }}"
    tags:
      Name:                 "PublicRoute"
    subnets:
      - "{{ pub_subnet_1_id }}"
    routes:
      - dest:               "0.0.0.0/0"
        gateway_id:         "{{ igw_id }}"
  register:                 my_pub_rt
#- debug:                   var=hostvars

- name:                     Setup private subnet routes
  ec2_vpc_route_table:
    vpc_id:                 "{{ vpc_id }}"
    region:                 "{{ vpc_region }}"
    tags:
      Name:                 "PrivateRoute"
    subnets:
      - "{{ pri_subnet_1_id }}"
    routes:
      - dest:               "0.0.0.0/0"
        gateway_id:         "{{ ngw_id }}"
  register:                 my_pri_rt
#- debug:                   var=hostvars

- name:                     Create SSH security group
  ec2_group:
    name:                   "SSH-SG"
    description:            "Allow SSH access"
    vpc_id:                 "{{ vpc_id }}"
    rules:
      - proto:              tcp
        from_port:          22
        to_port:            22
        cidr_ip:            0.0.0.0/0
  register:                 my_ssh_sg
#- debug:                   var=hostvars

- name:                     Create web security group
  ec2_group:
    name:                   "WEB-SG"
    description:            "Allow HTTP/HTTPS access"
    vpc_id:                 "{{ vpc_id }}"
    rules:
      - proto:              tcp
        from_port:          80
        to_port:            80
        cidr_ip:            0.0.0.0/0
      - proto:              tcp
        from_port:          443
        to_port:            443
  register:                 my_web_sg
- debug:                    var=hostvars
